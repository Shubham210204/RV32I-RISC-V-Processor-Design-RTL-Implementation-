$date
	Thu Apr 10 10:00:29 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module riscv_top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # zero $end
$var wire 32 $ write_back_data [31:0] $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 1 ' reg_write $end
$var wire 32 ( reg_data2 [31:0] $end
$var wire 32 ) reg_data1 [31:0] $end
$var wire 5 * rd [4:0] $end
$var wire 32 + pc_next [31:0] $end
$var wire 32 , pc_current [31:0] $end
$var wire 7 - opcode [6:0] $end
$var wire 1 . mem_write $end
$var wire 1 / mem_to_reg $end
$var wire 1 0 mem_read $end
$var wire 32 1 mem_data [31:0] $end
$var wire 32 2 instruction [31:0] $end
$var wire 32 3 imm [31:0] $end
$var wire 7 4 funct7 [6:0] $end
$var wire 3 5 funct3 [2:0] $end
$var wire 1 6 branch $end
$var wire 1 7 alu_src $end
$var wire 32 8 alu_result [31:0] $end
$var wire 2 9 alu_op [1:0] $end
$var wire 32 : alu_input2 [31:0] $end
$var wire 4 ; alu_control [3:0] $end
$scope module ac $end
$var wire 3 < funct3 [2:0] $end
$var wire 7 = funct7 [6:0] $end
$var wire 2 > alu_op [1:0] $end
$var reg 4 ? alu_control [3:0] $end
$upscope $end
$scope module alu_core $end
$var wire 4 @ alu_control [3:0] $end
$var wire 32 A b [31:0] $end
$var wire 1 # zero $end
$var wire 32 B a [31:0] $end
$var reg 32 C result [31:0] $end
$upscope $end
$scope module cu $end
$var wire 7 D opcode [6:0] $end
$var reg 2 E alu_op [1:0] $end
$var reg 1 7 alu_src $end
$var reg 1 6 branch $end
$var reg 1 0 mem_read $end
$var reg 1 / mem_to_reg $end
$var reg 1 . mem_write $end
$var reg 1 ' reg_write $end
$upscope $end
$scope module dmem $end
$var wire 32 F addr [31:0] $end
$var wire 1 ! clk $end
$var wire 1 0 mem_read $end
$var wire 1 . mem_write $end
$var wire 32 G write_data [31:0] $end
$var wire 32 H read_data [31:0] $end
$upscope $end
$scope module ig $end
$var wire 7 I opcode [6:0] $end
$var wire 32 J instruction [31:0] $end
$var reg 32 K imm_out [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 L instruction [31:0] $end
$var wire 32 M addr [31:0] $end
$upscope $end
$scope module pc_reg $end
$var wire 1 ! clk $end
$var wire 32 N pc_next [31:0] $end
$var wire 1 " reset $end
$var reg 32 O pc [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 P rd [4:0] $end
$var wire 32 Q read_data1 [31:0] $end
$var wire 32 R read_data2 [31:0] $end
$var wire 1 ' reg_write $end
$var wire 5 S rs1 [4:0] $end
$var wire 5 T rs2 [4:0] $end
$var wire 32 U write_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module riscv_top_tb $end
$scope module uut $end
$scope module ac $end
$upscope $end
$scope module alu_core $end
$upscope $end
$scope module cu $end
$upscope $end
$scope module dmem $end
$upscope $end
$scope module ig $end
$upscope $end
$scope module imem $end
$upscope $end
$scope module pc_reg $end
$upscope $end
$scope module rf $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx U
b0 T
b0 S
bx R
bx Q
b101 P
b0 O
b100 N
b0 M
b1010010011 L
b0 K
b1010010011 J
b10011 I
b0 H
bx G
bx F
b0 E
b10011 D
bx C
bx B
bx A
b10 @
b10 ?
b0 >
b0 =
b0 <
b10 ;
bx :
b0 9
bx 8
07
06
b0 5
b0 4
b0 3
b1010010011 2
b0 1
00
0/
0.
b10011 -
b0 ,
b100 +
b101 *
bx )
bx (
0'
b0 &
b0 %
bx $
x#
1"
0!
$end
#5
1!
#10
0!
0"
#15
b1 %
b1 T
b110 *
b110 P
b1 3
b1 K
b100000000001100010011 2
b100000000001100010011 J
b100000000001100010011 L
b1000 +
b1000 N
b100 ,
b100 M
b100 O
1!
#20
0!
#25
b10 %
b10 T
b111 *
b111 P
b10 3
b10 K
b1000000000001110010011 2
b1000000000001110010011 J
b1000000000001110010011 L
b1100 +
b1100 N
b1000 ,
b1000 M
b1000 O
1!
#30
0!
#35
b10 9
b10 >
b10 E
1'
b110011 I
b110 %
b110 T
b101 &
b101 S
b1000 *
b1000 P
b110011 -
b110011 D
b0 3
b0 K
b11000101000010000110011 2
b11000101000010000110011 J
b11000101000010000110011 L
b10000 +
b10000 N
b1100 ,
b1100 M
b1100 O
1!
#40
0!
#45
b111 %
b111 T
b110 &
b110 S
b1001 *
b1001 P
b11100110000010010110011 2
b11100110000010010110011 J
b11100110000010010110011 L
b10100 +
b10100 N
b10000 ,
b10000 M
b10000 O
1!
#50
0!
#55
b110 ;
b110 ?
b110 @
b100000 4
b100000 =
b1001 %
b1001 T
b1000 &
b1000 S
b1000000100101000000010010110011 2
b1000000100101000000010010110011 J
b1000000100101000000010010110011 L
b11000 +
b11000 N
b10100 ,
b10100 M
b10100 O
1!
#60
0!
#65
b0 :
b0 A
b10 ;
b10 ?
b10 @
b0 9
b0 >
b0 E
1.
0'
17
b100011 I
b0 4
b0 =
b0 %
b0 T
b0 &
b0 S
b10 5
b10 <
b0 *
b0 P
b100011 -
b100011 D
b10000000100011 2
b10000000100011 J
b10000000100011 L
b11100 +
b11100 N
b11000 ,
b11000 M
b11000 O
1!
#70
0!
#75
bx 1
bx H
bx $
bx U
0.
10
1'
1/
b0 :
b0 A
b11 I
b10 *
b10 P
b11 -
b11 D
b0 3
b0 K
b10000100000011 2
b10000100000011 J
b10000100000011 L
b100000 +
b100000 N
b11100 ,
b11100 M
b11100 O
1!
#80
0!
#85
b0 1
b0 H
bx :
bx A
00
0'
0/
07
b10011 I
b0 5
b0 <
b0 *
b0 P
b10011 -
b10011 D
b10011 2
b10011 J
b10011 L
b100100 +
b100100 N
b100000 ,
b100000 M
b100000 O
1!
#90
0!
#95
b101000 +
b101000 N
b100100 ,
b100100 M
b100100 O
1!
#100
0!
#105
b101100 +
b101100 N
b101000 ,
b101000 M
b101000 O
1!
#110
0!
#115
b110000 +
b110000 N
b101100 ,
b101100 M
b101100 O
1!
#120
0!
#125
b110100 +
b110100 N
b110000 ,
b110000 M
b110000 O
1!
#130
0!
#135
b111000 +
b111000 N
b110100 ,
b110100 M
b110100 O
1!
#140
0!
#145
b111100 +
b111100 N
b111000 ,
b111000 M
b111000 O
1!
#150
0!
#155
b1000000 +
b1000000 N
b111100 ,
b111100 M
b111100 O
1!
#160
0!
#165
b1000100 +
b1000100 N
b1000000 ,
b1000000 M
b1000000 O
1!
#170
0!
#175
b1001000 +
b1001000 N
b1000100 ,
b1000100 M
b1000100 O
1!
#180
0!
#185
b1001100 +
b1001100 N
b1001000 ,
b1001000 M
b1001000 O
1!
#190
0!
#195
b1010000 +
b1010000 N
b1001100 ,
b1001100 M
b1001100 O
1!
#200
0!
#205
b1010100 +
b1010100 N
b1010000 ,
b1010000 M
b1010000 O
1!
#210
0!
